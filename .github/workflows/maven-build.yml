name: CI/CD Pipelines

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: self-hosted
    steps:
      - name: Check for Git
        run: |
          if ! command -v git &> /dev/null
          then
              echo "Git not found, installing..."
              sudo yum update -y
              sudo yum install -y git
          else
              echo "Git is already installed."
          fi

      - name: Check for Docker
        run: |
          if ! command -v docker &> /dev/null
          then
              echo "Docker not found, installing..."
              sudo yum update -y
              sudo yum install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
          else
              echo "Docker is already installed."
          fi

      - name: Check for Docker Compose
        run: |
          if ! command -v docker-compose &> /dev/null
          then
              echo "Docker Compose not found, installing..."
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
          else
              echo "Docker Compose is already installed."
          fi

      - name: Check for Maven
        run: |
          if ! command -v mvn &> /dev/null
          then
              echo "Maven not found, installing..."
              sudo yum clean all
              sudo yum update -y
              sudo yum install -y maven --allowerasing
          else
              echo "Maven is already installed."
          fi

      - name: Install Java 17
        run: |
          sudo yum install -y java-17-openjdk java-17-openjdk-devel
          sudo alternatives --install /usr/bin/java java /usr/lib/jvm/java-17-openjdk/bin/java 1
          sudo alternatives --install /usr/bin/javac javac /usr/lib/jvm/java-17-openjdk/bin/javac 1
          sudo alternatives --set java /usr/lib/jvm/java-17-openjdk/bin/java
          sudo alternatives --set javac /usr/lib/jvm/java-17-openjdk/bin/javac
          echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk" | sudo tee -a /etc/environment
          echo "export JAVA_HOME=/usr/lib/jvm/java-17-openjdk" | sudo tee -a ~/.bashrc
          echo "export PATH=\$JAVA_HOME/bin:\$PATH" | sudo tee -a ~/.bashrc
          source ~/.bashrc
          java -version

      - name: Validate Installation
        run: |
          echo "Validating installation..."
          command -v git
          command -v docker
          command -v docker-compose
          command -v mvn
          java -version

  build:
    runs-on: self-hosted
    needs: setup
    steps:
      - name: Ensure Java 17 is active
        run: |
          echo "Checking Java version..."
          java -version
          echo "JAVA_HOME is $JAVA_HOME"
      
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build with Maven
        run: |
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk
          export PATH=$JAVA_HOME/bin:$PATH
          ./mvnw -B package

  deploy:
  runs-on: self-hosted
  needs: build
  steps:
    - name: Verify JAR file
      run: |
        echo "Verifying JAR file presence..."
        ls -al /home/ibtahaj/spring-petclinic/target/
        if [ -z "$(find /home/ibtahaj/spring-petclinic/target/ -name 'spring-petclinic-3.3.0-SNAPSHOT.jar')" ]; then
          echo "JAR file not found in target directory!"
          exit 1
        fi

    - name: Setup SSH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "Setting up SSH..."
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        echo "Scanning for SSH key..."
        ssh-keyscan -H 103.151.111.190 >> ~/.ssh/known_hosts || true
        echo "SSH key scan complete."

    - name: Deploy application
      env:
        DEPLOY_SERVER: '103.151.111.190'
        DEPLOY_PORT: '8080'
        DEPLOY_USER: 'ibtahaj'
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "Deploying application to $DEPLOY_SERVER"
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        chmod 700 ~/.ssh
        scp -i ~/.ssh/id_rsa /home/ibtahaj/spring-petclinic/target/spring-petclinic-3.3.0-SNAPSHOT.jar $DEPLOY_USER@$DEPLOY_SERVER:/home/ibtahaj/spring-petclinic/
        ssh -i ~/.ssh/id_rsa $DEPLOY_USER@$DEPLOY_SERVER "java -jar /home/ibtahaj/spring-petclinic/target/spring-petclinic-3.3.0-SNAPSHOT.jar"
     
    - name: Wait for application to start
      run: |
        echo "Waiting for application to start..."
        for i in {1..30}; do
          if curl -s http://103.151.111.190:8080 > /dev/null; then
            echo "Application is up!"
            break
          else
            echo "Application is not up yet, retrying in 10 seconds..."
            sleep 10
          fi
        done

  test:
    runs-on: self-hosted
    needs: deploy
    steps:
      - name: Check application URL
        run: |
          echo "Checking application URL"
          curl -s http://103.151.111.190:8080 || exit 1

      - name: Run tests
        run: ./mvnw test
